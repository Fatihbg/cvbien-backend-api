from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
import uvicorn
import os
import json
from datetime import datetime
from typing import Optional
import openai

# Firebase imports
try:
    import firebase_admin
    from firebase_admin import credentials, auth, firestore
    FIREBASE_AVAILABLE = True
except ImportError:
    FIREBASE_AVAILABLE = False
    print("‚ö†Ô∏è Firebase Admin SDK non install√©")

app = FastAPI(title="CV Bien API", version="6.1.0")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:5173", 
        "https://cvbien4.vercel.app",
        "https://cvbien.vercel.app"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuration Firebase
db = None
if FIREBASE_AVAILABLE:
    try:
        if not firebase_admin._apps:
            # Configuration Firebase depuis les variables d'environnement
            firebase_config = {
                "type": "service_account",
                "project_id": os.getenv("FIREBASE_PROJECT_ID", "cvbien-backend"),
                "private_key_id": os.getenv("FIREBASE_PRIVATE_KEY_ID"),
                "private_key": os.getenv("FIREBASE_PRIVATE_KEY", "").replace('\\n', '\n'),
                "client_email": os.getenv("FIREBASE_CLIENT_EMAIL"),
                "client_id": os.getenv("FIREBASE_CLIENT_ID"),
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_x509_cert_url": os.getenv("FIREBASE_CLIENT_X509_CERT_URL")
            }
            
            # V√©rifier les cl√©s requises
            required_keys = ["private_key_id", "private_key", "client_email", "client_id", "client_x509_cert_url"]
            missing_keys = [key for key in required_keys if not firebase_config.get(key)]
            
            if missing_keys:
                print(f"‚ùå Variables Firebase manquantes: {missing_keys}")
                raise Exception(f"Variables Firebase manquantes: {missing_keys}")
            
            cred = credentials.Certificate(firebase_config)
            firebase_admin.initialize_app(cred)
            print("üî• Firebase Admin SDK initialis√© avec succ√®s")
        else:
            print("üî• Firebase Admin SDK d√©j√† initialis√©")
            
        # Initialiser Firestore
        db = firestore.client()
        print("üî• Firestore client initialis√©")
        
    except Exception as e:
        print(f"‚ùå Erreur initialisation Firebase: {e}")
        print("üîÑ Mode sans Firebase...")
        db = None

# Security
security = HTTPBearer()

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """V√©rifier le token Firebase"""
    if not FIREBASE_AVAILABLE or not db:
        raise HTTPException(status_code=503, detail="Firebase non disponible")
    
    try:
        # V√©rifier le token Firebase
        decoded_token = auth.verify_id_token(credentials.credentials)
        return decoded_token
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Token invalide: {str(e)}")

@app.get("/")
def read_root():
    return {
        "message": "CV Bien API v6.1.0", 
        "status": "online",
        "firebase": "active" if db else "inactive"
    }

@app.get("/version")
def version():
    return {
        "version": "6.1.0",
        "status": "Firebase Active" if db else "Firebase Inactive",
        "timestamp": "2025-01-06-01:30"
    }

@app.get("/health")
def health():
    return {"status": "healthy", "message": "API is running"}

@app.post("/api/auth/validate-firebase")
async def validate_firebase_token(token_data: dict):
    """Valider un token Firebase et retourner les infos utilisateur"""
    if not FIREBASE_AVAILABLE or not db:
        raise HTTPException(status_code=503, detail="Firebase non disponible")
    
    try:
        id_token = token_data.get("idToken")
        if not id_token:
            raise HTTPException(status_code=400, detail="Token manquant")
        
        # V√©rifier le token Firebase
        decoded_token = auth.verify_id_token(id_token)
        uid = decoded_token['uid']
        
        # R√©cup√©rer les infos utilisateur depuis Firestore
        user_doc = db.collection('users').document(uid).get()
        
        if user_doc.exists:
            user_data = user_doc.to_dict()
            return {
                "success": True,
                "user": {
                    "id": uid,
                    "email": user_data.get("email"),
                    "name": user_data.get("name"),
                    "credits": user_data.get("credits", 0)
                }
            }
        else:
            # Cr√©er l'utilisateur dans Firestore s'il n'existe pas
            user_data = {
                "email": decoded_token.get("email"),
                "name": decoded_token.get("name", ""),
                "credits": 5,  # Cr√©dits gratuits
                "created_at": datetime.now().isoformat()
            }
            db.collection('users').document(uid).set(user_data)
            
            return {
                "success": True,
                "user": {
                    "id": uid,
                    "email": user_data["email"],
                    "name": user_data["name"],
                    "credits": user_data["credits"]
                }
            }
            
    except Exception as e:
        print(f"‚ùå Erreur validation Firebase: {e}")
        raise HTTPException(status_code=401, detail=f"Erreur validation: {str(e)}")

@app.get("/api/user/profile")
async def get_user_profile(current_user: dict = Depends(verify_token)):
    """R√©cup√©rer le profil utilisateur"""
    if not db:
        raise HTTPException(status_code=503, detail="Firebase non disponible")
    
    try:
        uid = current_user['uid']
        user_doc = db.collection('users').document(uid).get()
        
        if user_doc.exists:
            user_data = user_doc.to_dict()
            return {
                "success": True,
                "user": {
                    "id": uid,
                    "email": user_data.get("email"),
                    "name": user_data.get("name"),
                    "credits": user_data.get("credits", 0)
                }
            }
        else:
            raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
            
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration profil: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

# --- Endpoint pour g√©n√©ration CV ---
@app.post("/optimize-cv")
async def optimize_cv(request: dict):
    """
    Endpoint pour g√©n√©rer un CV optimis√© avec les nouvelles instructions d√©taill√©es.
    """
    try:
        cv_content = request.get("cv_content", "")
        job_description = request.get("job_description", "")
        target_language = request.get("target_language", "french")
        instructions = request.get("instructions", "")
        
        print(f"üöÄ Requ√™te CV - Langue: {target_language}")
        print(f"üìÑ CV Content length: {len(cv_content)}")
        print(f"üìã Job Description length: {len(job_description)}")
        
        # Instructions d√©taill√©es pour l'IA
        detailed_instructions = """
Instructions de Traitement du Mod√®le (Pour l'IA): 
Objectif Principal : Adapter, reformuler et enrichir le CV actuel afin qu'il corresponde parfaitement √† 100% aux exigences et au langage de l'offre d'emploi cible, positionnant le candidat comme le profil id√©al.

Analyse Approfondie :
- Analyser le [Description d'Emploi Cible] pour identifier tous les mots-cl√©s, les comp√©tences techniques (hard skills), les qualit√©s interpersonnelles (soft skills), les responsabilit√©s et les exigences sp√©cifiques (outils, m√©thodologies, certifications).
- Analyser le [CV Actuel Complet] pour extraire toutes les informations pertinentes (exp√©riences, formations, comp√©tences, etc.).
- S'assurer que 100% des informations du [CV Actuel Complet] sont conserv√©es dans le nouveau CV, uniquement reformul√©es si n√©cessaire.

Harmonisation et Reformulation (Strat√©gie d'Adaptation) :
- Exp√©riences Professionnelles : Pour chaque poste, r√©√©crire les descriptions de responsabilit√©s et d'accomplissements. Utiliser le langage et les mots-cl√©s exacts trouv√©s dans l'offre d'emploi. Mettre l'accent sur les r√©sultats (si possible, quantification) qui sont directement pertinents pour les fonctions list√©es dans l'offre cible. Chaque point doit sembler √™tre une pr√©paration directe au poste vis√©.
- √âducation/Formation : Reformuler les descriptions de cours, projets ou m√©moires pour souligner leur lien avec le domaine ou les technologies mentionn√©es dans l'offre d'emploi.

Comp√©tences Techniques (Hard Skills) :
- Int√©grer tous les outils/technologies mentionn√©s dans l'offre.
- R√®gle du "Mensonge Blanc" : Si une comp√©tence technique est demand√©e (ex. Python) et est absente du CV initial, l'ajouter avec une mention d'un niveau d'expertise de base ou interm√©diaire (ex. "Bases solides en Python pour l'analyse de donn√©es" ou "Connaissance fonctionnelle de..."). NE PASinventer un niveau Expert si l'information n'est pas pr√©sente.

Soft Skills : Int√©grer tous les soft skills mentionn√©s dans l'offre d'emploi (ex. "Proactif", "Esprit d'√©quipe", "R√©solution de probl√®mes complexes") dans la section Comp√©tences sans justification suppl√©mentaire.

R√©daction des √âl√©ments Cl√©s :
- R√©sum√© Professionnel (Objectif) : R√©diger un paragraphe de 3-4 lignes percutant. Il doit imm√©diatement positionner le candidat comme la personne id√©ale en citant directement les exigences et la culture de l'entreprise (si elle est mentionn√©e) et en mentionnant les ann√©es d'exp√©rience pertinentes et les comp√©tences cl√©s demand√©es dans l'offre.

Structure et Mise en Forme (Pour l'Optimisation ATS) :
Le nouveau CV doit respecter la structure exacte suivante pour faciliter la lecture des syst√®mes de suivi des candidatures (ATS) et des recruteurs :

A. En-t√™te (Centr√©) :
- Pr√©nom NOM (Taille de police plus grande)
- Informations de contact (T√©l√©phone | E-mail | Lien LinkedIn/Portfolio) (Taille de police plus petite, centr√©)

B. R√©sum√© Professionnel (Centr√©) :
- Le paragraphe r√©dig√© selon l'instruction ci-dessus.

C. Exp√©riences Professionnelles (Titre Alignement √† Gauche) :
- Titre : EXP√âRIENCES PROFESSIONNELLES
- Format : [Intitul√© du Poste] | [Nom de l'Entreprise] | [Dates]
- Liste √† puces des responsabilit√©s et r√©alisations reformul√©es.

D. √âducation et Formations (Titre Alignement √† Gauche) :
- Titre : √âDUCATION ET FORMATIONS
- Format : [Dipl√¥me] | [√âtablissement] | [Dates]
- Liste des formations reformul√©es.

E. Comp√©tences (Titre Alignement √† Gauche) :
- Titre : COMP√âTENCES
- Sous-sections claires :
  - Hard Skills : Liste des technologies, outils, et m√©thodologies (y compris celles ajout√©es via la r√®gle du "Mensonge Blanc").
  - Soft Skills : Liste de tous les soft skills demand√©s dans l'offre.
  - Certifications/Projets : Toutes les certifications ou projets personnels/acad√©miques mentionn√©s dans le CV initial.
  - Langues : Niveaux de langue.

Livrable : Le nouveau CV r√©dig√© int√©gralement, structur√© selon le format A-B-C-D-E, pr√™t √† √™tre copi√©/coll√© dans un document de mise en page. Ne pas fournir d'explication, seulement le CV final.
        """
        
        # Configuration OpenAI
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        if not openai.api_key:
            print("‚ö†Ô∏è OpenAI API Key non configur√©e, retour du CV original")
            return JSONResponse({
                "success": True,
                "optimized_cv": cv_content,
                "ats_score": 75,
                "message": "CV retourn√© sans optimisation (OpenAI non configur√©)"
            })
        
        # Prompts selon la langue
        language_prompts = {
            "french": f"""
{detailed_instructions}

CV ACTUEL COMPLET:
{cv_content}

DESCRIPTION D'EMPLOI CIBLE:
{job_description}

G√©n√®re le nouveau CV optimis√© selon les instructions ci-dessus, en fran√ßais.
""",
            "english": f"""
{detailed_instructions}

CURRENT COMPLETE CV:
{cv_content}

TARGET JOB DESCRIPTION:
{job_description}

Generate the optimized CV according to the instructions above, in English.
""",
            "dutch": f"""
{detailed_instructions}

HUIDIGE VOLLEDIGE CV:
{cv_content}

DOELSTELLING FUNCTIEBESCHRIJVING:
{job_description}

Genereer de geoptimaliseerde CV volgens de bovenstaande instructies, in het Nederlands.
"""
        }
        
        prompt = language_prompts.get(target_language, language_prompts["french"])
        
        try:
            # Appel √† l'API OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un expert en recrutement et optimisation de CV. Tu adaptes parfaitement les CV aux offres d'emploi en respectant scrupuleusement toutes les instructions fournies."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=4000,
                temperature=0.7
            )
            
            optimized_cv = response.choices[0].message.content.strip()
            
            # Calculer un score ATS r√©aliste
            ats_score = calculate_ats_score(optimized_cv, job_description)
            
            print(f"‚úÖ CV optimis√© g√©n√©r√© - Score ATS: {ats_score}")
            
            return JSONResponse({
                "success": True,
                "optimized_cv": optimized_cv,
                "ats_score": ats_score,
                "message": "CV optimis√© avec succ√®s selon les nouvelles instructions"
            })
            
        except Exception as openai_error:
            print(f"‚ùå Erreur OpenAI: {openai_error}")
            # Fallback: retourner le CV original
            return JSONResponse({
                "success": True,
                "optimized_cv": cv_content,
                "ats_score": 75,
                "message": "CV retourn√© sans optimisation (erreur OpenAI)"
            })
        
    except Exception as e:
        print(f"‚ùå Erreur optimisation CV: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "message": f"Erreur: {str(e)}"
            }
        )

def calculate_ats_score(cv_content: str, job_description: str) -> int:
    """Calculer un score ATS r√©aliste bas√© sur la correspondance des mots-cl√©s"""
    try:
        # Extraire les mots-cl√©s de l'offre d'emploi
        job_keywords = set()
        job_lower = job_description.lower()
        
        # Mots-cl√©s techniques communs
        tech_keywords = ['python', 'javascript', 'react', 'node', 'sql', 'excel', 'powerpoint', 'leadership', 'management', 'communication', 'project', 'team', 'analysis', 'data', 'development', 'design']
        
        for keyword in tech_keywords:
            if keyword in job_lower:
                job_keywords.add(keyword)
        
        # Extraire les mots-cl√©s du CV
        cv_keywords = set()
        cv_lower = cv_content.lower()
        
        for keyword in tech_keywords:
            if keyword in cv_lower:
                cv_keywords.add(keyword)
        
        # Calculer le score de correspondance
        if len(job_keywords) == 0:
            return 80  # Score par d√©faut si pas de mots-cl√©s d√©tect√©s
        
        match_count = len(job_keywords.intersection(cv_keywords))
        match_percentage = (match_count / len(job_keywords)) * 100
        
        # Bonus pour la structure
        structure_bonus = 0
        if 'experience' in cv_lower or 'exp√©rience' in cv_lower:
            structure_bonus += 10
        if 'education' in cv_lower or 'formation' in cv_lower:
            structure_bonus += 10
        if 'skills' in cv_lower or 'comp√©tences' in cv_lower:
            structure_bonus += 10
        if '@' in cv_content:  # Email
            structure_bonus += 5
        
        final_score = min(100, match_percentage + structure_bonus)
        return max(70, int(final_score))  # Score minimum de 70
        
    except Exception as e:
        print(f"‚ùå Erreur calcul score ATS: {e}")
        return 80  # Score par d√©faut

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    print(f"üöÄ D√©marrage du serveur Firebase sur le port {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)